from collections import deque

from matplotlib import pyplot as plt

from algoGeneticAlns import algo
from parser import parse_collecteurs, parse_clients
from Client import Client
from alns.ALNS import ALNS
from alns.Instance import Instance
from alns.Vehicle import Vehicle


def solve():
    collecteur = parse_collecteurs("data/Medium6/vehicle.json")[0]
    clients = parse_clients("data/Medium6/points.csv")

    depot = Client(indice=collecteur.indice, localisation=collecteur.localisation,
                   horaires=collecteur.horaires, nom="depot_" + collecteur.nom)
    vehicle = Vehicle(collecteur.vehicule_capacite, collecteur.vehicule_vitesse,
                      collecteur.temps_collecte_fixe, collecteur.temps_collecte_caisse,
                      depot,
                      collecteur.cout_fixe, collecteur.cout_km, collecteur.cout_caisse, collecteur.cout_stop,
                      collecteur.vehicule_type, collecteur.nom)

    instance = Instance(clients, vehicle)
    methode = ALNS(instance)

    algo.setup(methode, pop_size=10)
    for i in range(100):
        algo.run()


def show():
    # [rho, dmax, theta, ns]
    meta = [[0.23224052620268043, 0.7090194526924836, 0.9972141448432932, 1],
            [0.2881332334796486, 0.6332699026254835, 0.10242775802929016, 7],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.33266962522351956, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.5017061797737854, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.6112617012800772, 0.21363258935260293, 4],
            [0.4450826684640812, 0.6112617012800772, 0.21363258935260293, 4],
            [0.4450826684640812, 0.6112617012800772, 0.21363258935260293, 4],
            [0.4450826684640812, 0.41529206395756435, 0.21363258935260293, 4],
            [0.4450826684640812, 0.33248430751480745, 0.21363258935260293, 4],
            [0.4450826684640812, 0.6112617012800772, 0.21363258935260293, 4],
            [0.4450826684640812, 0.7708830765098573, 0.21363258935260293, 4],
            [0.4450826684640812, 0.26230966064920547, 0.21363258935260293, 4],
            [0.4450826684640812, 0.6112617012800772, 0.21363258935260293, 4],
            [0.4450826684640812, 0.6112617012800772, 0.21363258935260293, 4],
            [0.4450826684640812, 0.6112617012800772, 0.21363258935260293, 4],
            [0.4450826684640812, 0.6112617012800772, 0.21363258935260293, 4],
            [0.4450826684640812, 0.6112617012800772, 0.21363258935260293, 4],
            [0.4450826684640812, 0.42457127916018955, 0.21363258935260293, 4],
            [0.4450826684640812, 0.6112617012800772, 0.21363258935260293, 4],
            [0.4450826684640812, 0.42457127916018955, 0.21363258935260293, 4],
            [0.4450826684640812, 0.42457127916018955, 0.21363258935260293, 4],
            [0.4450826684640812, 0.42457127916018955, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.4450826684640812, 0.42457127916018955, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.42457127916018955, 0.21363258935260293, 4],
            [0.330757601392454, 0.42457127916018955, 0.21363258935260293, 4],
            [0.330757601392454, 0.42457127916018955, 0.21363258935260293, 4],
            [0.330757601392454, 0.42457127916018955, 0.21363258935260293, 4],
            [0.15498979035075924, 0.42457127916018955, 0.21363258935260293, 4],
            [0.15498979035075924, 0.42457127916018955, 0.21363258935260293, 4],
            [0.15498979035075924, 0.42457127916018955, 0.21363258935260293, 4],
            [0.330757601392454, 0.42457127916018955, 0.21363258935260293, 4],
            [0.15498979035075924, 0.42457127916018955, 0.21363258935260293, 4],
            [0.330757601392454, 0.42457127916018955, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.42457127916018955, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.3582939091836569, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.330757601392454, 0.6112617012800772, 0.21363258935260293, 4],
            [0.1810829048245517, 0.6112617012800772, 0.21363258935260293, 4],
            [0.3064943613156663, 0.6112617012800772, 0.21363258935260293, 4],
            [0.1810829048245517, 0.6112617012800772, 0.21363258935260293, 4],
            [0.1810829048245517, 0.6112617012800772, 0.21363258935260293, 4],
            [0.1810829048245517, 0.6112617012800772, 0.21363258935260293, 4],
            [0.1810829048245517, 0.6112617012800772, 0.21363258935260293, 4],
            [0.1810829048245517, 0.6112617012800772, 0.21363258935260293, 4],
            [0.1810829048245517, 0.6112617012800772, 0.21363258935260293, 4],
            [0.1810829048245517, 0.6112617012800772, 0.21363258935260293, 4],
            [0.1810829048245517, 0.6112617012800772, 0.21363258935260293, 4],
            [0.1810829048245517, 0.6112617012800772, 0.21363258935260293, 4]]

    tau = deque(maxlen=100)
    c = deque(maxlen=100)
    theta = deque(maxlen=100)
    ns = deque(maxlen=100)

    for h in meta:
        tau.append(h[0])
        c.append(h[1])
        theta.append(h[2])
        ns.append(h[3])

    plt.plot(tau)
    plt.scatter(range(len(tau)), tau)

    plt.plot(c)
    plt.scatter(range(len(c)), c)

    plt.plot(theta)
    plt.scatter(range(len(theta)), theta)

    plt.plot(ns)
    plt.scatter(range(len(ns)), ns)

    # DRAW, PAUSE AND CLEAR
    plt.draw()
    plt.show()


if __name__ == "__main__":
    # solve()
    show()
